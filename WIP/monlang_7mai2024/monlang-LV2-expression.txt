STATEMENT :=  LET-STATEMENT | VAR-STATEMENT
        | EARLY-RETURN
        | GUARD | IF-STATEMENT
        | FOREACH-STATEMENT | WHILE-STATEMENT | DO-WHILE-STATEMENT
        | EXPRESSION

LET-STATEMENT := ProgramSentence<KEYWORD-LET, IDENTIFIER, EXPRESSION>
KEYWORD-LET := Atom<let>

VAR-STATEMENT := ProgramSentence<KEYWORD-VAR, IDENTIFIER, EXPRESSION>
KEYWORD-VAR := Atom<var>


EARLY-RETURN-STATEMENT := ProgramSentence<EARLY-RETURN>
EARLY-RETURN := KEYWORD-RETURN EXPRESSION?
KEYWORD-RETURN := Atom<return>


GUARD-STATEMENT := ProgramSentence<GUARD (, GUARD-OR (, EARLY-RETURN?), EXPRESSION)?>
GUARD := SquareBracketsTerm<EXPRESSION>
GUARD-OR := Atom<||>


IF-STATEMENT := ProgramSentence<KEYWORD-IF, GUARD, BLOCK (, KEYWORD-ELSIF, GUARD, BLOCK)* (, KEYWORD-ELSE, BLOCK)?>
KEYWORD-IF := Atom<if>
KEYWORD-ELSIF := Atom<elsif>
KEYWORD-ELSE := Atom<else>


FOREACH-STATEMENT := ProgramSentence<KEYWORD-FOREACH, EXPRESSION, BLOCK>
KEYWORD-FOREACH := Atom<foreach>

WHILE-STATEMENT := ProgramSentence<KEYWORD-WHILE, GUARD, BLOCK>
KEYWORD-WHILE := Atom<while>

DO-WHILE-STATEMENT := ProgramSentence<KEYWORD-DO, BLOCK, KEYWORD-WHILE, GUARD>
KEYWORD-DO := Atom<do>

---

EXPRESSION := PRIMITIVE-EXPRESSION
        | IDENTIFIER
        | FUNCTION-CALL
        | SUBSCRIPT
        | FIELD-ACCESS
        | BINARY-OPERATION
        | BLOCK
        | ParenthesesGroup<EXPRESSION>

IDENTIFIER := // any non-matching Atom

---

PRIMITIVE-EXPRESSION := LITERAL-INT | LITERAL-FRACTION | LITERAL-DECIMAL
        | LITERAL-STRING
        | LIST
        | MAP
        | LAMBDA

LITERAL-INT := Atom<(0(x|b|o))?[0-9]('?[0-9])*(_[a-z]+)?>

LITERAL-FRACTION := Atom<[0-9]+/[0-9]+>

LITERAL-DECIMAL := Path<Atom<[0-9]+>, Atom<[0-9]+>>
        | PostfixParenthesesGroup<Path<Atom<[0-9]+>, Atom<[0-9]+>>, ParenthesesGroup<Atom<[0-9]+>>>

LITERAL-STRING := Quotation<.*>

LIST := SquareBracketsGroup<EXPRESSION*>

MAP := EMPTY-MAP | SquareBracketsGroup<Association<EXPRESSION, EXPRESSION>+>
EMPTY-MAP := Atom<[:]>

LAMBDA := Association<ParenthesesGroup<IDENTIFIER*>, CurlyBracketsGroup<STATEMENT*>>

---

FUNCTION-CALL := PostfixParenthesesGroup<EXPRESSION, ParenthesesGroup<EXPRESSION*>>

---

SUBSCRIPT := PostfixSquareBracketsGroup<EXPRESSION, SquareBracketsGroup<EXPRESSION>>

---

FIELD-ACCESS := Path<EXPRESSION, IDENTIFIER>

---

BINARY-OPERATION := OPERATION-ADD | OPERATION-SUB | OPERATION-MUL | OPERATION-DIV
        | OPERATION-IS-EQ | OPERATION-IS-NE
        | OPERATION-IS-LT | OPERATION-IS-LE
        | OPERATION-IS-GT | OPERATION-IS-GE
        | OPERATION-LOGICAL-AND | OPERATION-LOGICAL-OR 


OPERATION-ADD := Term<EXPRESSION, OPERATOR-ADD, EXPRESSION>
OPERATOR-ADD := Atom<+>

OPERATION-SUB := Term<EXPRESSION, OPERATOR-SUB, EXPRESSION>
OPERATOR-SUB := Atom<->

OPERATION-MUL := Term<EXPRESSION, OPERATOR-MUL, EXPRESSION>
OPERATOR-MUL := Atom<*>

OPERATION-DIV := Term<EXPRESSION, OPERATOR-DIV, EXPRESSION>
OPERATOR-DIV := Atom</>


OPERATION-IS-EQ := Term<EXPRESSION, OPERATOR-IS-EQ, EXPRESSION>
OPERATOR-IS-EQ := Atom<==>

OPERATION-IS-NE := Term<EXPRESSION, OPERATOR-IS-NE, EXPRESSION>
OPERATOR-IS-NE := Atom<!=>

OPERATION-IS-LT := Term<EXPRESSION, OPERATOR-IS-LT, EXPRESSION>
OPERATOR-IS-LT := Atom<`<`>

OPERATION-IS-LE := Term<EXPRESSION, OPERATOR-IS-LE, EXPRESSION>
OPERATOR-IS-LE := Atom<`<=`>

OPERATION-IS-GT := Term<EXPRESSION, OPERATOR-IS-GT, EXPRESSION>
OPERATOR-IS-GT := Atom<`>`>

OPERATION-IS-GE := Term<EXPRESSION, OPERATOR-IS-GE, EXPRESSION>
OPERATOR-IS-GE := Atom<`>=`>


OPERATION-LOGICAL-AND := Term<EXPRESSION, OPERATOR-LOGICAL-AND, EXPRESSION>
OPERATOR-LOGICAL-AND := Atom<and>

OPERATION-LOGICAL-OR := Term<EXPRESSION, OPERATOR-LOGICAL-OR, EXPRESSION>
OPERATOR-LOGICAL-OR := Atom<or>

---

BLOCK := CurlyBracketsGroup<STATEMENT*>
