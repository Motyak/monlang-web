
var list []
var map [:]

{; read}
list[#1] -- ERR
list[#1..3] -- []
list[#1..3]! -- ERR
map['key] -- ERR

{; write}
list[#1] := 91 -- [91]
list[#1]? := 91 -- []
list[#1]! := 91 -- ERR
list[#1..3] := 91 -- [91, 91, 91]
list[#1..3]? := 91 -- []
list[#1..3]! := 91 -- ERR
map['key] := 91 -- ['key:91]
map['key]? := 91 -- [:]
map['key]! := 91 -- ERR

{; read & write}
list[#1] += 91 -- ERR
list[#1]? += 91 -- []
list[#1..3] += 91 -- []
list[#1..3]! += 91 -- ERR
map['key] += 91 -- ERR
map['key]? += 91 -- [:]

---

var list ['a, 'b, 'c, 'd]
let var list[#-3..-1]!
var -- ['b, 'c, 'd]
var += 'x -- ['a, 'bx, 'cx, 'dx]
var := var[#1] -- ['bx, 'bx, 'bx, 'bx]

var list ['a, 'b]
let var list[#-3..-1]?
var -- ['a, 'b]
var += 'x -- ['ax, 'bx]
var += ['c, 'd]
var -- ['ax, 'bx, 'c, 'd]
var += 'x -- ['ax, 'bxx, 'cx, 'dx]
var := var[#1] -- ['ax, 'bxx, 'bxx, 'bxx]

---

let list {
    var list []
    list[#1..100] := 91
    list
}

let list {
    var list []
    foreach [1 .. 100] {
        list[#$1] := 91
    }
    list
}

---

Both index, range and key subscript must have the ability
to auto-vivificate (create lvalue if non-existing
before assigning the value)

The subscript index argument should be between 1 and 
size of the list/map + 1.
  -> we cannot auto-vivificate extra lvalue than the
     one explicitly written (<> perl arrays)





