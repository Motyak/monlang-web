Multi-dimensional array/list wrapped in a Struct with invariants:
```
type Matrix {
    is List<List<Float>> // there is an implicit invariant here, make sure cell values are `Float`s
    invariants {
        /* make sure its a 2x2 matrix */
        [ len(this) == 2 ]
        foreach this {
            [ len($1) == 2 ]
        }
    }
}

var matrix _ /* we can't give a relevant value at the moment,.. 
..so it's uninitialized (special value reserved by the language, can't be used accidentally)
*/

/* populate the matrix by taking advantage of the autovivification capability of the language */
mut {
    /* any invariant check job event trigger will be checked at the end of block, duplicate events ignored */
    matrix[0][0] = 1.0 // automatically create matrix[0] and matrix[0][0]
    matrix[0][1] = 2.0 // automatically create matrix[0][1]
    matrix[1][0] = 3.0 // automatically create matrix[1] and matrix[1][0]
    matrix[1][1] = 4.0 // automatically create matrix[1][1]
}

matrix[0][1] = 3.0 // ok
matrix = Matrix([[1.0, 2.0], [3.0, 4.0]]) // also ok
matrix[0][2] = 3.0 // breaks struct invariants => RuntimeException
```

---

Nested map without wrapping in a Struct or defining invariants:
```
{
    var table [:]
    table["a"]["b"]["c"] = "val" // automatically create table["a"], table["a"]["b"] and table["a"]["b"]["c"]
    /* table == ["a":["b":["c":"val"]]] */
}

{
    var table ["a":["b":[:]]]
    table["a"]!["b"]!["c"] = "val" // assert table["a"] and table["a"]["b"] exist, then automatically create table["a"]["b"]["c"]
    /* table == ["a":["b":["c":"val"]]] */
}

{
    var table ["a":[:]]]
    table["a"]?["b"]?["c"] = "val" /*
    if table["a"] and table["a"]["b"] exist,
    then it will automatically create table["a"]["b"]["c"]
    otherwise it will stop here (no assignment performed)
    */
    /* table == ["a":[:]]] */
}

```

