Byte::fromBinaryStr("1100110101")
  -> <=> Byte(0b11'1100'0101)
Char(32)
  -> <=> Char(0x20)
PhoneNb(00'377'12'34'56'78)
PhoneNb_France(06'77'30'60'36)
  -> PhoneNb(00'33'6'77'30'60'36)
Frac(1, 2)
  -> <=> 1/2
  -> <=> 0.5
  -> <=> 0.5(0)
Float(1/2)

0.1 + 0.2 // prints 0.3
<=>
Frac(1, 10) + Frac(2, 10)

Float(0.1) + Float(0.2) // prints 0.30000000000000004

3 + 33.(3)% // prints 4
3 + 33.(3)% + 50% // prints 6

3^2 // prints 9
3^2 + 4^2 // prints 25
(3^2 + 4^2)^(1/2) // prints 5
  -> <=> sqrt(3^2 + 4^2)

3^^2 // prints 27
  -> <=> 3^3

```
/*
calculate inverse power tower of order 2, e.g.: (27) = 3^^2 = 3^3
*/
let inv-tower (n):{
    [ Int(n) >= 1 ] || err_invalid-arg()
    {
        [ n == 1 ]
        return 1
    }
    Float(log_e(n) / lambert-w(log_e(n)).real)
}

let input 2
let inv-tower_ inv-tower(input)
let truncated-inv-tower Int::from(inv-tower_ * 1000) |> Frac(1000)
print(truncated-inv-tower) // prints 1.559
print(Float(1.559) ^ Float(1.559)) // prints 1.998237447840078
```

