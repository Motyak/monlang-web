# simple, with ternary operators

```monlang
foreach 1..=200 {
    let i $1

    var cur-item ""
    cur-item += [ i % 5 == 0 ] "Foo" || ""
    cur-item += [ i % 7 == 0 ] "Bar" || ""
    cur-item += [ cur-item == "" ] "${i}" || ""

    println("{} -> {}", i, cur-item)
}
```

# with Map and byte flags

```monlang
var map-to-output [Byte(1):"Foo", Byte(2):"Bar", Byte(3):"FooBar"]
foreach 1..=200 {
    let i $1
    map-to-output[Byte(0)] = "${i}"

    var flags Byte(0)
    if [ i % 5 == 0 ] {
        flags |= Byte(1 << 0)
    }
    if [ i % 7 == 0 ] {
        flags |= Byte(1 << 1)
    }

    println("{} -> {}", i, map-to-output[flags])
}
```

# Most complete yet relatively staight-forward one

```monlang
foreach 1..=200 {
    let i $1
    var all false
    var none true

    print("<$i> -> ")

    if [ i % 5 == 0 ] {
        all &&= true
        none ||= true
        
        print("Foo")    
    }

    if [ i % 7 == 0 ] {
        all &&= true
        none ||= true
        
        print("Bar")
    }

    if [ all ] {
        ;
    }
    else {
        // if any but all
        ;
    }

    if [ none ] {
        print("<$i>")
    }
    else {
        // if any but none
        ;
    }

    println() -- line feed
}
```
