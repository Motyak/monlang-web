namespace global

type Uint {
    is Int
    invariants {
        [ this >= 0 ]
    }
}

namespace Bowling

let NB-OF-PINS 10
let TRIES-PER-FRAME 2
let NB-OF-FRAMES 10
/*
Faire une matrice des gains qui associe à chaque outcome..
.. une fonction qui prend en paramètre tries et successor..
.. et qui retourne le score
*/

type Try {
    is Uint
    invariants {
        [ this <= NB-OF-PINS ]
    }
}

enum FrameEnum {
    enumerates {
        IN-PROGRESS = 0
        OPEN = 1
        SPARE = 2
        STRIKE = 3
    }
}

struct Frame {
    fields {
        List<Try> tries
        FrameEnum outcome
        Frame? successor
        Uint score
    }

    invariants {
        [ len(tries) <= TRIES-PER-FRAME ]

        var bonus-pts 0
        {
            let successor-1st-try successor?.tries[#1]? ?? 0
            let successor-2nd-try successor?.tries[#2]? ?? 0

            [ outcome >= FrameEnum::SPARE ]
            bonus-pts += successor-1st-try
            [ outcome == FrameEnum::STRIKE ]
            bonus-pts += successor-2nd-try
        }
        [ score == sum(tries) + bonus-pts ]
    }
}

struct Game {
    fields {
        List<Frame> frames
        Uint total-score
    }

    invariants {
        [ len(frames) <= NB-OF-FRAMES ]
        
        var sum 0
        foreach frames {
            sum += $cur.score
        }
        [ total-score == sum ]
    }
}

let NEW-GAME {
    let frames []
    let total-score 0
    Game(frames, total-score)
}

namespace main -- end of Bowling

let input-scores ```
    10
    4 6
    7 3
    10
    10
    0 0
    0 0
    3 5
    6 4
    10
    10
    9
```

/*
hardcoded for the moment (reads string constant)..
.. but is supposed to take input from stdin
*/
var input-stream {
    /* state variables */
    var _cur 1
    var _parsed-tokens []

    let next ():{
        let pop-list (OUT list):{
            var popped-item list[#1]
            list := list[#2..=]
            return popped-item
        }

        let consume-line ():{
            var line ""
            until [ input-scores[#cur]? =~ /\n/ ] {
                line += input-scores[#cur]
                cur += 1
            }
            cur += 1 -- consume the newline character
            line
        }

        let parse-line (line):{
            _parsed-tokens += line |> split(/\s+/)
        }

        if [ len(_parsed-tokens) != 0 ] {
            return pop-list(&_parsed-tokens)
        }

        let eof cur > len(input-scores)
        if [ eof ] {
            return Stream::END
        }

        consume-line() |> parse-line()
    }
    Stream(next)
}

// returns a stream of the game in progress
let play-game (OUT input-stream):{
    let is-over (game):{
        [ len(game.frames) >= Bowling::NB-OF-FRAMES ] || return false
        if [ game.frames[#10].outcome == FrameEnum::STRIKE ] {
            return game.frames[#12]?.outcome >= FrameEnum::OPEN
        }
        if [ game.frames[#10].outcome == FrameEnum::SPARE ] {
            return game.frames[#11]?.outcome >= FrameEnum::OPEN
        }
        game.frames[#10].outcome == FrameEnum::OPEN
    }

    /* state variables */
    var _game Bowling::NEW-GAME
    var _curr-frame-nb 1
    var _remaining-pins Bowling::NB-OF-PINS
    var _is-first-call true

    let progress ():{
        if [ _is-first-call ] {
            _is-first-call := false
            return _game -- initial state of the game
        }

        if [ _game |> is-over() ] {
            return Stream::END
        }

        var first-try next(&input-stream) |> Int::fromStr() |> Try()
        [ some(curr-try) ] || err("Game has finished prematurely")

        if [ first-try == Bowling::NB-OF-PINS ] {
            let score Bowling::NB-OF-PINS
            trx {
                _game.frames += {
                    let tries [Bowling::NB-OF-PINS]
                    let outcome FrameEnum::STRIKE
                    let successor Frame?()
                    Frame(tries, outcome, successor, score)
                }
                _game.total-score += score
            }
            return _game
        }
        
        var second-try next(&input-stream) |> Int::fromStr() |> Try()
        [ some(curr-try) ] || err("Game has finished prematurely")

        if [ first-try + second-try == Bowling::NB-OF-PINS ] {
            let score Bowling::NB-OF-PINS
            trx {
                _game.frames += {
                    let tries [first-try, second-try]
                    let outcome FrameEnum::SPARE
                    let successor Frame?()
                    Frame(tries, outcome, successor, score)
                }
                _game.total-score += score
            }
            return _game
        }

        let score first-try + second-try
        trx {
            _game.frames += {
                let tries [first-try, second-try]
                let outcome FrameEnum::OPEN
                let successor Frame?()
                Frame(tries, outcome, successor, score)
            }
            _game.total-score += score
        }
        _game
    }
    Stream(progress)
}

/* play until end of one game or end of input stream */
foreach input-stream |> play-game() {
    let game-in-progress $cur
    // TODO: print current state of the game
}
