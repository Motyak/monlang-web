PROGRAM := (PROGRAM-SENTENCE NEWLINE)*

---

PROGRAM-SENTENCE = PROGRAM-WORD (SPACE PROGRAM-WORD)*

TERM := WORD (SPACE WORD)*

---

PROGRAM-WORD := SQUARE-BRACKETS-TERM
              | WORD

WORD := ASSOCIATION
      | PATH
      | POSTFIX-PARENTHESES-GROUP | POSTFIX-SQUARE-BRACKETS-GROUP
      | CURLY-BRACKETS-GROUP | PARENTHESES-GROUP | SQUARE-BRACKETS-GROUP
      | QUOTATION
      | ATOM-QUOTE' | ATOM
// note: ATOM takes all character until hitting one reserved by one of the word above

---

SQUARE-BRACKETS-TERM := '[' SPACE TERM SPACE ']'

ASSOCIATION := {WORD - ASSOCIATION} ':' NO-COLON WORD

POSTFIX-PARENTHESES-GROUP := {WORD - ASSOCIATION} PARENTHESES-GROUP

POSTFIX-SQUARE-BRACKETS-GROUP := {WORD - ASSOCIATION} SQUARE-BRACKETS-GROUP '!'?

PATH := {WORD - ASSOCIATION} '.' ATOM

CURLY-BRACKETS-GROUP := '{' TERM? | ((NEWLINE <TAB(S)+1> PROGRAM-SENTENCE?)+ NEWLINE <TAB(S)>) '}'
// note: <TAB(S)> is a as many TAB as nested levels (starting from 0, 1, ..)

PARENTHESES-GROUP := '(' (TERM (',' SPACE TERM)*)? ')'

SQUARE-BRACKETS-GROUP := '[' NO-SPACE-NO-COLON (TERM (',' SPACE TERM)*)? ']'
  -> should also support multiline as cbg, without the need for trailing comma on each line input

QUOTATION := ('"' QUOTED-LINE? '"') | ('```' QUOTED-FORMAT? (NEWLINE <TAB(S)+1> QUOTED-LINE?)+ NEWLINE <TAB(S)> '```')
// note: should be /(?!\)"/ rather than /"/, otherwise escaped double quote can be misinterpreted
// note2: <TAB(S)> is a as many TAB as nested levels (starting from 0, 1, ..)

ATOM-QUOTE' -- when we fall-through Atom BUT it starts with the >>'<< character
  -> should then be considered a Quotation (rather than a new individual grammar entity)
  -> we are forced to define it at this level in the grammar because we can't define Quotation based on Atom
     (since Atom isn't defined, it's the fall-through)

DOLLARS-CBG* -- when we fall-through Atom BUT it start with >>${<< characters
  -> should then be considered a special CurlyBracketsGroup

decimal numbers results in Path, potentially PostfixPG off of Path (as in `0.1(2)`)
  -> no particular handling in LV1, rather some kind of `fixNumerals()` in LV2..
     ..to detect this pattern beforehand and turn the entity into a Numeral

ATOM -- fall-through

====================================================================================

comments ? doc ?
decimal numbers ? fractions ?
quotations ?
